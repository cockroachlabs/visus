# Copyright 2024 The Cockroach Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0


name: sqlefficiency
enabled: true
scope: node
frequency: 10
maxresults: 10
labels: [type]
metrics:
  - name : rows
    kind : counter
    help : number of rows.
query: 
  WITH
    stmt_hr_calc
      AS (
        SELECT
          statement_id,
          IF(implicit_txn = 'false', 1, 0) AS explicittxn,
          IF(full_scan, 1, 0) AS fullscan,
          IF(sample_plan::STRING LIKE '%index join%', 1, 0) AS ijoinstmt,
          rows_avg::INT8 AS numrows,
          rows_read_avg::INT8 AS rowsread,
          greatest(rows_avg::INT8, rows_read_avg::INT8) AS rowsmean,
          count AS execcnt
        FROM
          crdb_internal.node_statement_statistics
        WHERE
          application_name NOT LIKE '$ internal-%'
      ),
    sql_distinct_cnt
      AS (
        SELECT
          statement_id,
          sum(fullscan * execcnt) AS fullcnt,
          sum(ijoinstmt * execcnt) AS ijoincnt,
          sum(explicittxn * execcnt) AS explicitcnt,
          sum(
            (
              IF(
                fullscan = 0
                AND ijoinstmt = 0
                AND explicittxn = 0,
                1,
                0
              )
            )
            * execcnt
          )
            AS healthycnt,
          sum(execcnt) AS exectotal,
          sum(rowsmean * execcnt) AS lioperstmt
        FROM
          stmt_hr_calc
        GROUP BY
          statement_id
        ORDER BY
          lioperstmt
      )
  SELECT 'fulllio' as type,sum(lioperstmt * (IF(fullcnt > 0, 1, 0))) AS rows FROM sql_distinct_cnt
  UNION
  SELECT 'ijoinlio' as type,sum(lioperstmt * (IF(ijoincnt > 0, 1, 0))) AS rows FROM sql_distinct_cnt
  UNION
  SELECT 'explicitlio' as type,sum(lioperstmt * (IF(explicitcnt > 0, 1, 0))) AS rows FROM sql_distinct_cnt
  UNION
  SELECT 'healtylio' as type,sum(lioperstmt * (IF(healthycnt > 0, 1, 0))) AS rows FROM sql_distinct_cnt
  LIMIT 
    $1  
  ;
